# üìå –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –∑–∞–¥–∞—á.
# üìå –§—É–Ω–∫—Ü–∏—é —É–≥–∞–¥–∞–π–∫—É –∑–∞–¥–µ–∫–æ—Ä–∏—Ä—É–π—Ç–µ:
# ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤,
# ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –∏
# ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.
# üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤.
from typing import Callable
from typing import Any
import json
import os
from random import randint

MIN_NUM = 1
MAX_NUM = 100
MIN_ATTEMPTS = 1
MAX_ATTEMPTS = 10


def game(func: Callable) -> Callable[[int, int], bool]:
    def wrapper(num: int, attempts: int) -> bool:
        print(f'–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ   : –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ {num:>3} –ß–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ {attempts:>3}', end='')
        if not (MIN_NUM <= num <= MAX_NUM and MIN_ATTEMPTS <= attempts <= MAX_ATTEMPTS):
            num = randint(MIN_NUM, MAX_NUM)
            attempts = randint(MIN_ATTEMPTS, MAX_ATTEMPTS)
            print(': –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
            print(f'–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ {num:>3} –ß–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ {attempts:>3}')
        print()
        return func(num, attempts)

    return wrapper


def save_args(func: Callable) -> Callable[[], Any]:
    file_name = f'{func.__name__}.json'
    data = []
    if file_name in os.listdir(os.curdir):
        with open(file_name, 'r', encoding='utf-8') as f:
            data = json.load(f)
    def wrapper(*args, **kwargs) -> Any:
        nonlocal file_name
        result = func(*args, **kwargs)
        data.append({'args': args, **kwargs, 'result': result})
        with open(file_name, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2)

    return wrapper


def count(num: int) -> Callable[[], Any]:
    def deco(func: Callable) -> Callable[[], Any]:
        def wrapper(*args, **kwargs) -> Any:
            result = []
            for _ in range(num):
                result.append(func(*args, **kwargs))
            return result

        return wrapper
    return deco


@count(3)
@save_args
@game
def guess_num(num: int, attempts: int) -> bool:
    guess = None
    for i in range(attempts):
        guess = int(input(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_NUM} –¥–æ {MAX_NUM}: "))
        if guess < num:
            print("–í–∞—à–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ")
        elif guess > num:
            print("–í–∞—à–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ")
        else:
            print("–í—ã —É–≥–∞–¥–∞–ª–∏!")
            break
    return guess == num

if __name__ == '__main__':
    guess_num(3, 4)