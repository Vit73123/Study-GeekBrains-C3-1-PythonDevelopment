# üìå –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–∞—Ö –ø–æ –û–û–ü –±—ã–ª —Å–æ–∑–¥–∞–Ω –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Ö—Ä–∞–Ω—è—â–∏–π –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É, –∞ —Ç–∞–∫–∂–µ –≤—ã—á–∏—Å–ª—è—é—â—É—é –ø–µ—Ä–∏–º–µ—Ç—Ä,
# –ø–ª–æ—â–∞–¥—å –∏ –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –∏ –≤—ã—á–∏—Ç–∞—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –±–µ—Ä—è –∑–∞ –æ—Å–Ω–æ–≤—É –ø–µ—Ä–∏–º–µ—Ç—Ä.
# üìå –ù–∞–ø–∏—à–∏—Ç–µ 3-7 —Ç–µ—Å—Ç–æ–≤ unittest –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.
import unittest
from L13_Hw_t01_Solution_rectangle import Rectangle


class TestRectangle(unittest.TestCase):
    def setUp(self) -> None:
        self.r1 = Rectangle(3)
        self.r2 = Rectangle(3)


    def test_create_one_side(self):
        self.assertIsNotNone(self.r1.width,
                             f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —à–∏—Ä–∏–Ω—ã, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ—Ç–∞")
        self.assertEquals(self.r1.width, 3)

    def test_create_negative_side(self):
        with self.assertRaises(ValueError):
            Rectangle(-1, -3)

    def test_sum(self):
        self.assertIsInstance(self.r1 + self.r2, Rectangle,
                              f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ–∂–µ–Ω–∏—è Rectangle")

if __name__ == "__main__":
    unittest.main(verbosity=4)
